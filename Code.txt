#!/usr/bin/python
#StringsPP 
#Claire McKenna and Ben Withnell

import sys

#define input file as ifile
ifile=''

#get total number of arguments
total = len(sys.argv)

#test for incorrect usage, exit
if total != 2:
	print ("Usage: %s filename" % sys.argv[0])
	sys.exit(2)

#define input file
ifile = sys.argv[1]

#open as file object (fo) 
fo = open(ifile,"r")

#printed random info about file to test
print("Name: %s" % fo.name)
print("Closed or not: %s" % fo.closed)
print("Opening mode: %s" % fo.mode)
print("Softspace flag: %s" % fo.softspace)

#read in all lines, print first line
lines = fo.readlines()
print("The first line is: %s" % lines[0])

##--------------------
## Comments below this line serve as notes for code creation
##--------------------

#Define Regexes
##IP Addresses -- ###/\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/g
##Private IP Address -- /(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)/
##Domain names
##MD5 --  /\b[0-9a-f]{32}\b/ig
##Email addresses
##Function names -- Common Windows function names


#Parse command-line args
##File(s) to be parsed
###Can we accept full dirs?
##Options (custom regex, etc)?
###Show only IP, or domain or etc
###Write to specified file instead of stdout


#Parse file passed as command-line arg for printable ascii strings greater than 4 characters
#Compare array of parsed strings against all of our regular expressions
#        for s in strings:
#                Regex 1
#                Regex 2
#                Etc
#Python equiv of uniq --count to identify repeating strings
#        --Output in the format of <string>(# of times it appears)
#Print out each section of regular expressions in a pretty format. Something like:


#------------------------------------------
#IP Addresses:
#1.2.3.4 (4)
#2.2.2.2
#1.1.1.1
#------------------------------------------
#Domains:
#www.evil.com
#www.google.com (2)
#------------------------------------------


####Problems to address
#Unicode
#Prevent hotlinking of domains. Output in format of www[.]evil[.]com to prevent lapses in opsec
#Can we handle parsing DNS logs for permutations/etc?
#        Can we handle multiple formats? Is there a standard?




####Links
#http://stackoverflow.com/questions/17195924/python-equivalent-of-unix-strings-utility